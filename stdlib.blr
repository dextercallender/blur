
char intensityToChar(int intensity){
    
    char[] map = ['$','@','B','%','8','&','W','M','#','*','o','a','h','k','b','d','p','q','w','m','Z','0','O','Q','L','C','J','U','Y','X','z','c','v','u','n','x','r','j','f','t','/','|','(',')','1','{','}','[',']','?','-','_','+','~','<','>','i','!','l','I',';',':',',','^','.',' ']; 

    int maplen = len(map);
    int factor = intensity * len(map); /* scale factor to map intensity (0-255) to char (0-len(map) */
    int index = factor / 255;
    if (index > 0) {
        return map[maplen - index];
    }
    else {
        return map[0];
    }
}

/*
int charToIntensity(char c){

    char[] map = ['$','@','B','%','8','&','W','M','#','*','o','a','h','k','b','d','p','q','w','m','Z','0','O','Q','L','C','J','U','Y','X','z','c','v','u','n','x','r','j','f','t','/','|','(',')','1','{','}','[',']','?','-','_','+','~','<','>','i','!','l','I',';',':',',','^','.',' ']; 

    int index = -1;
    int i;
    for(i=0; i<len(map); i=i+1){
        if(map[i] == c){  
		index = i; 
	    }
    }

    int factor = 255 * index;
    intensity = factor / len(map);
    return intensity;
}

*/

int edgeDetect(string x, int edgeDist){
    int[][] image = readGrayscaleImage(x);
    int width = len(image);
    int height = len(image[0]);

    int leftPixel = -1;
    int rightPixel = -1;
    int bottomPixel = -1;

    int distance = -1;    
    int black = 0;

    int row;
    int col;
    for(row=0; row<width; row=row+1){
	for(col=0; col<height; col=col+1){
	    black = 0;
	    leftPixel = image[row][col];

	    if (col < height-1){
		rightPixel = image[row][(col+1)];	
	        distance = pixelDistance( leftPixel, rightPixel );	
		if(distance > edgeDist){
		    black = 1;
		}
	    }

	    if(row < width-1){
		bottomPixel = image[(row+1)][col];
	        distance = pixelDistance( leftPixel, bottomPixel );	
		if (distance > edgeDist){
		    black = 1;
		}
	    }

	    if( black == 1 ){
		image[row][col] = 1;
	    }else{
	        image[row][col] = 0;
	    }
	
	}
    }

    for(row=0; row<width; row=row+1){
	for(col=0; col<height; col=col+1){
            print( image[row][col]  );
	}
	println("");
    }

    return 1;
}

int pixelDistance( int x, int y ){
    int distance; 
    if( x > y ){
	distance = x - y;
    }else{
	distance = y - x;	
    }
    return distance;
}

int main(){

    int a = edgeDetect("images/leaf.jpg", 30);
    return 0;

}
